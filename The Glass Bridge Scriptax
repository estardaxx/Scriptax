-- Attempt to load Rayfield library from sirius.menu
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

-- Check if Rayfield loaded successfully
if not success or not Rayfield then
    warn("Failed to load Rayfield from https://sirius.menu/rayfield. Running script without UI.")
    -- Fallback script without UI
    for _, step in pairs(workspace:GetChildren()) do
        if step.Name == "Step" and step:IsA("Model") then
            local glassTempered = step:FindFirstChild("glass_tempered")
            if glassTempered then
                for _, part in pairs(glassTempered:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("MeshPart") then
                        part.Color = Color3.fromRGB(0, 255, 0) -- Neon green
                        part.Material = Enum.Material.Neon
                    end
                end
            end
        end
    end
    print("Coloring completed: glass_tempered (neon green).")
else
    -- Show decorative notification on script start
    Rayfield:Notify({
        Title = "Glass Color Menu",
        Content = "Script initialized successfully.",
        Duration = 3,
        Image = "rbxassetid://4483345998"
    })

    -- Services
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local HttpService = game:GetService("HttpService")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")

    -- Function to create the window
    local function createWindow()
        local Window = Rayfield:CreateWindow({
            Name = "Glass Color Menu | Scriptax",
            LoadingTitle = "Loading...",
            LoadingSubtitle = "by Estardax",
            ShowText = "Open Menu",
            Theme = "Serenity",
            ToggleUIKeybind = "G",
            KeySystem = false,
            ConfigurationSaving = { 
                Enabled = true, 
                FolderName = "ScriptaxConfig", 
                FileName = "GlassColorConfig" 
            }
        })

        -- ================== SHARED VARS ==================
        local glassEspEnabled = false
        local originalProps = {} -- [part] = {Color=..., Material=...}
        local GlassEspToggle = nil -- Reference to Glass ESP toggle
        local floatingButton = nil -- Reference to the floating button UI
        local floatingButtonToggle = nil -- Reference to the mobile toggle
        local stroke = nil -- Reference to the UIStroke for borders
        local cachedParts = { tempered = {} } -- Cache for parts to color
        local detectorToggle = nil -- Reference to Detector toggle
        local detectorEnabled = false
        local detectorOriginalParent = nil
        local detectorInstance = nil
        local correctAllToggle = nil -- Reference to Correct All toggle

        -- Cache parts to color
        local function cacheParts()
            cachedParts.tempered = {}
            for _, step in pairs(workspace:GetChildren()) do
                if step.Name == "Step" and step:IsA("Model") then
                    local glassTempered = step:FindFirstChild("glass_tempered")
                    if glassTempered then
                        for _, part in pairs(glassTempered:GetDescendants()) do
                            if part:IsA("BasePart") or part:IsA("MeshPart") then
                                table.insert(cachedParts.tempered, part)
                                if not originalProps[part] then
                                    originalProps[part] = { Color = part.Color, Material = part.Material }
                                end
                            end
                        end
                    end
                end
            end
            if #cachedParts.tempered == 0 then
                Rayfield:Notify({
                    Title = "Warning",
                    Content = "No glass_tempered found in workspace.",
                    Duration = 5,
                    Image = "rbxassetid://4483345998"
                })
            end
        end

        -- Apply ESP to cached parts
        local function applyGlassEsp()
            for _, part in pairs(cachedParts.tempered) do
                if part and part.Parent then
                    part.Color = Color3.fromRGB(0, 255, 0) -- Neon green
                    part.Material = Enum.Material.Neon
                end
            end
        end

        -- Reset ESP
        local function resetGlassEsp()
            for part, props in pairs(originalProps) do
                if typeof(part) == "Instance" and part and part.Parent then
                    part.Color = props.Color
                    part.Material = props.Material
                end
            end
            if not glassEspEnabled then
                originalProps = {}
                cachedParts.tempered = {}
            end
        end

        -- Toggle ESP
        local function toggleGlassEsp()
            glassEspEnabled = not glassEspEnabled
            if GlassEspToggle then GlassEspToggle:Set(glassEspEnabled) end
            if glassEspEnabled then
                cacheParts()
                applyGlassEsp()
                if stroke then
                    stroke.Color = Color3.fromRGB(0, 255, 0) -- Green borders
                end
                Rayfield:Notify({
                    Title = "Success",
                    Content = "glass_tempered (neon green) enabled.",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            else
                resetGlassEsp()
                if stroke then
                    stroke.Color = Color3.fromRGB(0, 0, 0) -- Black borders
                end
                Rayfield:Notify({
                    Title = "Reset",
                    Content = "glass_tempered reset to original colors.",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        end

        -- Function to create the floating draggable button
        local function createFloatingButton()
            if floatingButton then return end

            local screenGui = Instance.new("ScreenGui")
            screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
            screenGui.IgnoreGuiInset = true
            screenGui.ResetOnSpawn = false -- Prevent reset on death

            floatingButton = Instance.new("Frame")
            floatingButton.Size = UDim2.new(0, 60, 0, 60)
            floatingButton.Position = UDim2.new(0.5, 0, 0.5, 0)
            floatingButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- White background
            floatingButton.BorderSizePixel = 0
            floatingButton.Parent = screenGui

            local uiCorner = Instance.new("UICorner")
            uiCorner.CornerRadius = UDim.new(1, 0) -- Fully circular
            uiCorner.Parent = floatingButton

            stroke = Instance.new("UIStroke")
            stroke.Thickness = 2
            stroke.Color = glassEspEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 0, 0) -- Sync with ESP state
            stroke.Parent = floatingButton

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Text = "ESP"
            textLabel.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text
            textLabel.TextSize = 14
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.Parent = floatingButton

            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, 0, 1, 0)
            button.BackgroundTransparency = 1
            button.Text = ""
            button.Parent = floatingButton
            button.MouseButton1Click:Connect(toggleGlassEsp)

            -- Make it draggable
            local dragging = false
            local dragInput, dragStart, startPos

            local function update(input)
                local delta = input.Position - dragStart
                floatingButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end

            button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    dragStart = input.Position
                    startPos = floatingButton.Position
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end)
                end
            end)

            button.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                    dragInput = input
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if input == dragInput and dragging then
                    update(input)
                end
            end)
        end

        -- Function to destroy the floating button
        local function destroyFloatingButton()
            if floatingButton then
                floatingButton.Parent:Destroy()
                floatingButton = nil
                stroke = nil
            end
        end

        -- Recreate floating button on character respawn
        LocalPlayer.CharacterAdded:Connect(function()
            if floatingButtonToggle and floatingButtonToggle.CurrentValue then
                createFloatingButton()
            end
        end)

        -- Handle Detector toggle
        local function toggleDetector()
            detectorEnabled = not detectorEnabled
            if detectorToggle then detectorToggle:Set(detectorEnabled) end
            local step = workspace:GetChildren()[234]
            if not step or step.Name ~= "Step" or not step:IsA("Model") then
                Rayfield:Notify({
                    Title = "Error",
                    Content = "Step[234] not found or invalid.",
                    Duration = 5,
                    Image = "rbxassetid://4483345998"
                })
                return
            end
            local glassWeak = step:FindFirstChild("glass_weak")
            if not glassWeak then
                Rayfield:Notify({
                    Title = "Error",
                    Content = "glass_weak not found in Step[234].",
                    Duration = 5,
                    Image = "rbxassetid://4483345998"
                })
                return
            end
            local detector = glassWeak:FindFirstChild("Detector")
            if detectorEnabled then
                if detector then
                    detectorOriginalParent = detector.Parent
                    detectorInstance = detector
                    detector.Parent = nil -- Remove from game
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "Detector removed.",
                        Duration = 3,
                        Image = "rbxassetid://4483345998"
                    })
                else
                    Rayfield:Notify({
                        Title = "Error",
                        Content = "Detector not found in glass_weak.",
                        Duration = 5,
                        Image = "rbxassetid://4483345998"
                    })
                end
            else
                if detectorInstance and detectorOriginalParent then
                    detectorInstance.Parent = detectorOriginalParent -- Restore
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "Detector restored.",
                        Duration = 3,
                        Image = "rbxassetid://4483345998"
                    })
                end
            end
        end

        -- Correct All (convert glass_weak to glass_tempered)
        local function correctAllGlass()
            for _, step in pairs(workspace:GetChildren()) do
                if step.Name == "Step" and step:IsA("Model") then
                    local glassWeak = step:FindFirstChild("glass_weak")
                    if glassWeak then
                        glassWeak.Name = "glass_tempered"
                        for _, part in pairs(glassWeak:GetDescendants()) do
                            if part:IsA("BasePart") or part:IsA("MeshPart") then
                                part.CanCollide = true
                                part.Material = Enum.Material.Glass
                                part.Color = Color3.fromRGB(0, 0, 255) -- Blue
                            end
                        end
                    end
                end
            end
            if glassEspEnabled then
                cacheParts()
                applyGlassEsp()
            end
            Rayfield:Notify({
                Title = "Success",
                Content = "All glass_weak converted to glass_tempered (blue).",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
        end

        -- =================== TAB: MAIN ===================
        local TabMain = Window:CreateTab("Main", "layers")
        TabMain:CreateSection("Glass Coloring")
        GlassEspToggle = TabMain:CreateToggle({
            Name = "Glass ESP",
            CurrentValue = false,
            Flag = "Glass_ESP",
            Callback = function(v)
                glassEspEnabled = v
                if v then
                    cacheParts()
                    applyGlassEsp()
                    if stroke then
                        stroke.Color = Color3.fromRGB(0, 255, 0)
                    end
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "glass_tempered (neon green) enabled.",
                        Duration = 3,
                        Image = "rbxassetid://4483345998"
                    })
                else
                    resetGlassEsp()
                    if stroke then
                        stroke.Color = Color3.fromRGB(0, 0, 0)
                    end
                    Rayfield:Notify({
                        Title = "Reset",
                        Content = "glass_tempered reset to original colors.",
                        Duration = 3,
                        Image = "rbxassetid://4483345998"
                    })
                end
            end,
        })

        TabMain:CreateSection("Detector Control")
        detectorToggle = TabMain:CreateToggle({
            Name = "Remove Detector",
            CurrentValue = false,
            Flag = "Detector_Toggle",
            Callback = toggleDetector
        })

        TabMain:CreateSection("Correct All")
        correctAllToggle = TabMain:CreateToggle({
            Name = "Correct All Glass",
            CurrentValue = false,
            Flag = "Correct_All",
            Callback = function(v)
                if v then
                    correctAllGlass()
                end
            end
        })

        TabMain:CreateSection("Configuration")
        TabMain:CreateLabel("Settings save manually in-game.")

        -- ================= TAB: MOBILE =================
        local TabMobile = Window:CreateTab("Mobile", "smartphone")
        TabMobile:CreateSection("Floating Button")
        floatingButtonToggle = TabMobile:CreateToggle({
            Name = "ESP Button",
            CurrentValue = false,
            Flag = "Floating_Button",
            Callback = function(v)
                if v then
                    createFloatingButton()
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "Floating button enabled.",
                        Duration = 3,
                        Image = "rbxassetid://4483345998"
                    })
                else
                    destroyFloatingButton()
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "Floating button disabled.",
                        Duration = 3,
                        Image = "rbxassetid://4483345998"
                    })
                end
            end,
        })

        -- ================= TAB: KEYBINDS =================
        local TabKeys = Window:CreateTab("Keybinds", "keyboard")
        TabKeys:CreateSection("Custom Keybinds")
        TabKeys:CreateKeybind({
            Name = "Toggle Glass ESP",
            CurrentKeybind = "",
            HoldToInteract = false,
            Flag = "Keybind_GlassESP",
            Callback = toggleGlassEsp
        })
        TabKeys:CreateKeybind({
            Name = "Toggle Detector",
            CurrentKeybind = "",
            HoldToInteract = false,
            Flag = "Keybind_Detector",
            Callback = toggleDetector
        })
        TabKeys:CreateKeybind({
            Name = "Correct All Glass",
            CurrentKeybind = "",
            HoldToInteract = false,
            Flag = "Keybind_CorrectAll",
            Callback = function()
                correctAllToggle:Set(true)
                correctAllGlass()
            end
        })
        TabKeys:CreateLabel("Press G to open/close the menu")

        -- ================== CREDITS ==================
        local TabCredits = Window:CreateTab("Credits", "award")
        TabCredits:CreateSection("Script Information")
        TabCredits:CreateLabel("Glass Color Menu | Made by Estardax ⚡")
        TabCredits:CreateLabel("UI powered by Rayfield Library")

        return Window
    end

    -- Initial creation with default profile
    createWindow()
end
