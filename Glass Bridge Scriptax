-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Show decorative notification on script start
Rayfield:Notify({
    Title = "Bypass Enable",
    Content = "Script initialized successfully.",
    Duration = 3,
    Image = "rbxassetid://4483345998"
})

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Function to remove anti-cheat scripts and objects
local function removeAntiCheat()
    local antiCheatItems = {
        { path = workspace, name = "Anti-Fly" },
        { path = workspace, index = 25 }, -- Kept as index per your request
        { path = workspace, name = "Part" },
        { path = LocalPlayer.PlayerScripts, name = "Anti-Speed Script" }, -- Changed to PlayerScripts
        { path = LocalPlayer.PlayerScripts, name = "Anti-SuperJump Script" }, -- Changed to PlayerScripts
        { path = LocalPlayer.PlayerScripts, name = "Anti-Fly" },
        { path = LocalPlayer.PlayerScripts, name = "PlayerScriptsLoader" },
        { path = LocalPlayer.PlayerScripts, name = "antiflyhacks" }
    }

    for _, item in ipairs(antiCheatItems) do
        local obj
        if item.index then
            obj = item.path:GetChildren()[item.index]
        else
            obj = item.path and item.path:FindFirstChild(item.name)
        end
        if obj and obj.Parent then
            obj:Destroy()
        end
    end
end

-- Start persistent anti-cheat removal loop
task.spawn(function()
    while true do
        removeAntiCheat()
        task.wait(0) -- Fastest possible interval
    end
end)

-- Initial anti-cheat removal
removeAntiCheat()

-- Function to create the window
local function createWindow()
    local Window = Rayfield:CreateWindow({
        Name = "Crystal ESP Menu | Scriptax",
        LoadingTitle = "Loading...",
        LoadingSubtitle = "Professional Script Menu",
        ShowText = "Open Menu",
        Theme = "Serenity",
        ToggleUIKeybind = "G",
        KeySystem = false,
        ConfigurationSaving = { 
            Enabled = true, 
            FolderName = "ScriptaxConfig", 
            FileName = "Default" 
        }
    })

    -- ================== SHARED VARS ==================
    local espEnabled = false
    local espLoop = nil
    local correctAllEnabled = false
    local noJumpCooldownEnabled = false
    local originalProps = {}  -- [part] = {Color=..., Material=..., CanCollide=...}
    local EspToggle = nil -- Reference to ESP toggle
    local CorrectAllToggle = nil -- Reference to Correct All toggle

    local function getContainer()
        local root = workspace:FindFirstChild("Regenator")
        if not root then return nil end
        return root:FindFirstChild("Regenartor")
    end

    local function applyESPOnce()
        local container = getContainer()
        if not container then return end
        for _, model in ipairs(container:GetChildren()) do
            if model:IsA("Model") then
                local inner = model:FindFirstChild("modell")
                if inner then
                    for _, part in ipairs(inner:GetChildren()) do
                        if part:IsA("BasePart") then
                            if not originalProps[part] then
                                originalProps[part] = { Color = part.Color, Material = part.Material, CanCollide = part.CanCollide }
                            end
                            part.Color = part.CanCollide and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                            part.Material = Enum.Material.Neon
                        end
                    end
                end
            end
        end
    end

    local function resetESP()
        for part, props in pairs(originalProps) do
            if typeof(part) == "Instance" and part and part.Parent then
                part.Color = props.Color
                part.Material = props.Material
                if not correctAllEnabled then
                    part.CanCollide = props.CanCollide
                end
            end
        end
        if not espEnabled and not correctAllEnabled then
            originalProps = {}
        end
    end

    local function startESPLoop()
        if espLoop then return end
        espLoop = task.spawn(function()
            while espEnabled do
                applyESPOnce()
                task.wait(0.1) -- Fast update for dynamic crystals
            end
        end)
    end

    local function stopESPLoop()
        espEnabled = false
        resetESP()
        espLoop = nil
    end

    local function toggleCorrectAll(v)
        correctAllEnabled = v
        local container = getContainer()
        if not container then return end
        if v then
            for _, model in ipairs(container:GetChildren()) do
                if model:IsA("Model") then
                    local inner = model:FindFirstChild("modell")
                    if inner then
                        for _, part in ipairs(inner:GetChildren()) do
                            if part:IsA("BasePart") then
                                if not originalProps[part] then
                                    originalProps[part] = { Color = part.Color, Material = part.Material, CanCollide = part.CanCollide }
                                end
                                local touch = part:FindFirstChild("TouchInterest")
                                if touch then touch:Destroy() end
                                part.CanCollide = true
                            end
                        end
                    end
                end
            end
        else
            for part, props in pairs(originalProps) do
                if typeof(part) == "Instance" and part and part.Parent then
                    part.CanCollide = props.CanCollide
                end
            end
            if not espEnabled then
                originalProps = {}
            end
        end
    end

    -- ========= NO JUMP COOLDOWN =========
    local noJumpCooldownLoop = nil
    local function toggleNoJumpCooldown(v)
        noJumpCooldownEnabled = v
        if v then
            if noJumpCooldownLoop then return end
            noJumpCooldownLoop = task.spawn(function()
                while noJumpCooldownEnabled do
                    local jumpCooldown = LocalPlayer.PlayerGui:FindFirstChild("JumpCooldown")
                    if jumpCooldown then
                        jumpCooldown:Destroy()
                    end
                    task.wait(0.1)
                end
            end)
        else
            noJumpCooldownLoop = nil
        end
    end

    -- ========= MOVEMENT (persists on respawn) =========
    local savedWalkSpeed = 16
    local savedJumpPower = 50
    local lastAppliedWalkSpeed = 16
    local lastAppliedJumpPower = 50

    local function applyMovementTo(char)
        local hum = char:WaitForChild("Humanoid", 5) -- Wait for Humanoid with timeout
        if hum then
            -- Only apply if values have changed to reduce detection
            if savedWalkSpeed ~= lastAppliedWalkSpeed then
                hum.WalkSpeed = savedWalkSpeed
                lastAppliedWalkSpeed = savedWalkSpeed
            end
            if savedJumpPower ~= lastAppliedJumpPower then
                hum.JumpPower = savedJumpPower
                lastAppliedJumpPower = savedJumpPower
            end
            if noJumpCooldownEnabled then
                hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
            end
        end
    end

    -- Persistent movement application loop
    task.spawn(function()
        while true do
            if LocalPlayer.Character then
                applyMovementTo(LocalPlayer.Character)
            end
            task.wait(0) -- Fastest possible interval
        end
    end)

    LocalPlayer.CharacterAdded:Connect(applyMovementTo)
    if LocalPlayer.Character then
        task.spawn(function() applyMovementTo(LocalPlayer.Character) end)
    end

    -- ========= TELEPORT / AUTOFARM =========
    local teleportPosition = Vector3.new(-0.7761471271514893, 555.5330200195312, -288.62420654296875)

    local function doTeleport()
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if hrp then char:MoveTo(teleportPosition) end
    end

    local farmEnabled = false
    local farmLoop = nil
    local function startFarm()
        if farmLoop then return end
        farmLoop = task.spawn(function()
            while farmEnabled do
                doTeleport()
                task.wait(0.75)
            end
        end)
    end
    local function stopFarm()
        farmEnabled = false
        farmLoop = nil
    end

    -- =================== TAB: MAIN ===================
    local TabMain = Window:CreateTab("Main", "layers")
    TabMain:CreateSection("ESP")
    EspToggle = TabMain:CreateToggle({
        Name = "ESP Glasses",
        CurrentValue = false,
        Flag = "ESP_Glasses",
        Callback = function(v)
            espEnabled = v
            if v then startESPLoop() else stopESPLoop() end
        end,
    })
    CorrectAllToggle = TabMain:CreateToggle({
        Name = "Correct All",
        CurrentValue = false,
        Flag = "Correct_All",
        Callback = function(v)
            toggleCorrectAll(v)
        end,
    })

    TabMain:CreateSection("Movement")
    TabMain:CreateSlider({
        Name = "WalkSpeed",
        Range = {16, 200},
        Increment = 1,
        CurrentValue = savedWalkSpeed,
        Flag = "WalkSpeed",
        Callback = function(val)
            savedWalkSpeed = val
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                applyMovementTo(char)
            end
        end,
    })
    TabMain:CreateSlider({
        Name = "JumpPower",
        Range = {50, 300},
        Increment = 5,
        CurrentValue = savedJumpPower,
        Flag = "JumpPower",
        Callback = function(val)
            savedJumpPower = val
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                applyMovementTo(char)
            end
        end,
    })
    TabMain:CreateToggle({
        Name = "No Jump Cooldown",
        CurrentValue = false,
        Flag = "No_Jump_Cooldown",
        Callback = function(v)
            toggleNoJumpCooldown(v)
        end,
    })
    TabMain:CreateButton({
        Name = "Infinity Yield",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
        end
    })
    TabMain:CreateLabel("Infinity Yield loads an external script with additional features.")

    TabMain:CreateSection("Configuration")
    TabMain:CreateLabel("Settings save manually in-game.")

    -- ================= TAB: TELEPORTS =================
    local TabTP = Window:CreateTab("Teleports", "map-pin")
    TabTP:CreateSection("Positions")
    TabTP:CreateButton({
        Name = "Teleport to Final",
        Callback = doTeleport
    })
    TabTP:CreateSection("AutoFarm")
    TabTP:CreateToggle({
        Name = "AutoFarm Teleport",
        CurrentValue = false,
        Flag = "AutoFarm",
        Callback = function(v)
            farmEnabled = v
            if v then startFarm() else stopFarm() end
        end,
    })

    -- ================= TAB: KEYBINDS =================
    local TabKeys = Window:CreateTab("Keybinds", "keyboard")
    TabKeys:CreateSection("Custom Keybinds")

    TabKeys:CreateKeybind({
        Name = "Toggle ESP",
        CurrentKeybind = "",
        HoldToInteract = false,
        Flag = "Keybind_ESP",
        Callback = function()
            espEnabled = not espEnabled
            if EspToggle then EspToggle:Set(espEnabled) end
            if espEnabled then startESPLoop() else stopESPLoop() end
        end,
    })

    TabKeys:CreateKeybind({
        Name = "Toggle Correct All",
        CurrentKeybind = "",
        HoldToInteract = false,
        Flag = "Keybind_CorrectAll",
        Callback = function()
            correctAllEnabled = not correctAllEnabled
            if CorrectAllToggle then CorrectAllToggle:Set(correctAllEnabled) end
            toggleCorrectAll(correctAllEnabled)
        end,
    })

    TabKeys:CreateKeybind({
        Name = "Quick Teleport",
        CurrentKeybind = "",
        HoldToInteract = false,
        Flag = "Keybind_Teleport",
        Callback = doTeleport
    })

    TabKeys:CreateLabel("Press G to open/close the menu")

    -- ================== CREDITS ==================
    local TabCredits = Window:CreateTab("Credits", "award")
    TabCredits:CreateSection("Script Information")
    TabCredits:CreateLabel("Crystal ESP Menu | Made by Estardax ⚡")
    TabCredits:CreateLabel("UI powered by Rayfield Library")

    return Window
end

-- Initial creation with default profile
createWindow()
